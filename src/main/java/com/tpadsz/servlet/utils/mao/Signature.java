package com.tpadsz.servlet.utils.mao;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * SHA-256生成签名示例代码
 *
 * @date Sep 26, 2016 3:42:07 PM <br/>
 * @since JDK 1.7
 */
public class Signature {
    public static void main(String[] args) throws Exception {
        String key = "dd2a5427c052e798faf790b4900f723c"; // 秘钥

        String msg = "{\"clientId\":\"JW47a958c9901b92\",\"uid\":\"f69f98b5a2e9443fad6118c41df6c133\"," +
                "\"name\":\"getMewTasks\",\"version\":\"1.0\",\"method\":null," +
                "\"content\":\"82851a25f46f77290045a05184de2dc238e5dd2a65008967ed88c2d5a05a58bf414d796482a12ac0f4b57f5c41da995e47b360e4cbd394bf5dd7204dc12e7afe7b12d177bd7505e5affa774be248ab8fc3efa0d323a351e0bd068e99008eb725b77341bf263d5313ca705adf0e97e34522346420a14c7f5076e70a47032ff8628f6c897c9b7707e555e277634ebe5cad696b5159af652ea00f3a8b85d811d421be8c7e0c4dad39c4b6ac2196ca99bdbba0f456094aa9aee5c6a6de1bb8e00b924cdfc63f82118ce4ddae7a1094825d273b456873683d0c036b015a6ec7c02bffd00b4a3dd133d3f98465434f90b493b9c3d4453a916bbb1923802b13aba7592c7795973a4dc6e17cd396755962b2153450ff5017a66ec2da3ddcb961f913ca8b3bf22b403a78286434980d8db1fe0810e088d93f3b15864e5a1471501bfe86e0d369bc8565bf9b387d10fe564253bf07257066f157baefb38c064a7cf6dc63c3942cc6dd63da3784145b4b1dc053584fe6d221fd3172199ecbc7b91e5e3e05798f30c5f7ac1eeef385a295b1878c4c6ce6470fc81d4bee13f7a1800c56fd8e6e4a3638c9f445c49f2262b4a0bf03fc8ecc61813f159bd0a66098c9e935dfd04205e09977734ad760b8f791ffaf96085167e7c7dfeef205ce095cc83484b03bb6e180f48cc1dc641164e37655c110848c285901c837e00032082a23757c9e3aa9f76591a8911c9cc39ad5fc57fe4b3e094f8d052cc7389f6ca5f72593db6791ce74546c955859103189c2ae5d09294ead2e9ab29a7c0c2d9605eb17577d4571fe50a30cf21534c837c830b1227ed0562ee243ece0114b2ba9aec7a5c9a846d870389d0c3fee2a8b4b223a12baa605450c26d4ed47530b79cfc2065b47ab301d590472cb2e7c6c984127e6352faf5f4a8ad00b4a3dd133d3f98465434f90b493b9c3d4453a916bbb1923802b13aba7592c7795973a4dc6e17cd396755962b2153450ff5017a66ec2da3ddcb961f913ca8b3bf22b403a78286434980d8db1fe0810e3df3cb1447ab32ab104849755e481f620e442922bd1a64f923bf12887f8860f257066f157baefb38c064a7cf6dc63c346988159cd35a58a4a06978b18d6bff9711323aaad8868b544bc0feda643e0bb4e41a6967767d148489b99d7ab563ee6e6470fc81d4bee13f7a1800c56fd8e6eed392883b780c3eea29ef69a90af69cdcc61813f159bd0a66098c9e935dfd04205e09977734ad760b8f791ffaf96085167e7c7dfeef205ce095cc83484b03bb6e180f48cc1dc641164e37655c110848c285901c837e00032082a23757c9e3aa9f76591a8911c9cc39ad5fc57fe4b3e09c643f8d710eb2446bba5cc5a209727c9ee4522701663974b7772d735e8afd4072e9ab29a7c0c2d9605eb17577d4571fee3b597724192e6fce45b0480584c7f13afbf3456035075a9459d4ea7564d3bb94e0cdc3d52ca9d5625d7cebb1dade90d38cfb4e8b6560ea337366e64107dbe19a26b05675490f4ec1f8371126258d3f2adde9c323d1a8636796cd9b6a6dbcfb90d8750c236adec3285fcba2896f16c5277b7877fe4f66992a50dc26b41be6ca1d065ce908cd66818a3d67e0a5588eab59441620f660807f670927e63bd91f8c39c7112f92b2a0fa12e7889b44832eee12bdb0d84791be3a95731a91cb2852024e4370b20bba4a8a45b07019e610ddb7cc907da415af929e3ff69e885a3886389be4e1bb6348190a2dfc1e3d53ad0a8856e721daeb20de7a3e3d383545aa258916ea13642615e7747d70f7c235ac3752e095bc2fc11ad92d673fc982f4ba488ea776269ffaebe32b5d99d52715638f8daf5294d8b7303361c9b2fda89ec3723bc3e1cd6a17d740a1222e7fe25f68622a28d20da5dd28a42d04c646bdb035d289788fa17f652f3195a6e850759300ea8bcb31f3f96d1bc0c9e36a8f3356779754af6e013bb362b975352f800bf071a91e6020c59590c46ea3dbbb7a64618a9014d42bf76eadc5b57c6a4b7537f2076acdafb4cd0d42d329ee1cc432947bada8b5c2ae7585f46bed71aa3c67afc4d7b0387bf04e3124c4a813024d79ad7fdf18b96541f5b2e5810877fb3d48594018a4040ceaab369d0e7e3e07b54ae6938a8be50157d6c3b1c33561622ccbe3b353b60c619131861955d285b71d69ec312c5d449a00549e9696e8879bc4997bf7737b07896902928d3b41cbb84cc540d3ff30cc847cfa6df76b2440387ef078a88b40ba2cb38de83754356368613b96f5b6a1d618d1bd1c3d2e57c7388f05b92805f07ec6581549abfe251bb2ed8a2f61202eefbf0cc7d2bec79c98ade5eeab5bde5a717be4e1bb6348190a2dfc1e3d53ad0a885553a121b6630d999fc5d7131864362556ea13642615e7747d70f7c235ac3752e095bc2fc11ad92d673fc982f4ba488ea776269ffaebe32b5d99d52715638f8daf5294d8b7303361c9b2fda89ec3723bc3e1cd6a17d740a1222e7fe25f68622a28d20da5dd28a42d04c646bdb035d289788fa17f652f3195a6e850759300ea8bcb31f3f96d1bc0c9e36a8f3356779754a1d1ce31a364162a55f246d5bf3ae1ec588e6713b22d25314130f6ad790a3492742bf76eadc5b57c6a4b7537f2076acda90d65a155cace981644e2247b766c3082ae7585f46bed71aa3c67afc4d7b0387fdb3e006c47123fa643ccb3afd078d0e541f5b2e5810877fb3d48594018a4040ceaab369d0e7e3e07b54ae6938a8be50157d6c3b1c33561622ccbe3b353b60c619131861955d285b71d69ec312c5d449a00549e9696e8879bc4997bf7737b07896902928d3b41cbb84cc540d3ff30cc847cfa6df76b2440387ef078a88b40ba2b85e533a3b5a12d2ed13b76e5cd838e08d1bd1c3d2e57c7388f05b92805f07ec6581549abfe251bb2ed8a2f61202eefb55e3d7d8007f16838a5fb949fece2933be4e1bb6348190a2dfc1e3d53ad0a885b4449bf26cf28fbd38d9b2b95efb18d46ea13642615e7747d70f7c235ac3752e095bc2fc11ad92d673fc982f4ba488eadcc13ccc8d26f35c3616e2bd47056436\"," +
                "\"signature\":\"3efd2bef7b630e13adc022f5a8de9956593e63a606e208f2fd15307da02d29a8\"," +
                "\"respCode\":\"0000\",\"respMsg\":\"请求成功\",\"ip\":\"112.80.61.114\"}";

        String contents = "{\"task_province\":\"上海\",\"task_city\":\"上海\",\"task_type\":\"0\",\"task_sort_type\":\"0\",\"task_platform\":\"0\",\"page_num\":\"2\",\"page_size\":\"10\"}";

        String signature = signature(key + contents + key);
        JSONObject object = JSON.parseObject(msg);

        String encryptMsg = object.getString("content");
        String msg1 = AESDecryptor.decrypt(encryptMsg, key);
        System.out.println("object="+msg1);
        String sign1 = Signature.signature(key + msg1 + key);
        System.out.println(signature+"  "+sign1);
        System.out.println("验证签名: " + sign1.equals("3efd2bef7b630e13adc022f5a8de9956593e63a606e208f2fd15307da02d29a8"));
    }

    @SuppressWarnings("Since15")
    public static String signature(String message) throws NoSuchAlgorithmException {
        MessageDigest mdInst = MessageDigest.getInstance("SHA-256");
        mdInst.update(message.getBytes(Charset.forName("UTF-8")));
        return AESEncryptor.byte2Hex(mdInst.digest());
    }
}
